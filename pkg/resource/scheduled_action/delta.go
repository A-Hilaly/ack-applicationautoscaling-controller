// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package scheduled_action

import (
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.EndTime, b.ko.Spec.EndTime) {
		delta.Add("Spec.EndTime", a.ko.Spec.EndTime, b.ko.Spec.EndTime)
	} else if a.ko.Spec.EndTime != nil && b.ko.Spec.EndTime != nil {
		if !a.ko.Spec.EndTime.Equal(b.ko.Spec.EndTime) {
			delta.Add("Spec.EndTime", a.ko.Spec.EndTime, b.ko.Spec.EndTime)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ResourceID, b.ko.Spec.ResourceID) {
		delta.Add("Spec.ResourceID", a.ko.Spec.ResourceID, b.ko.Spec.ResourceID)
	} else if a.ko.Spec.ResourceID != nil && b.ko.Spec.ResourceID != nil {
		if *a.ko.Spec.ResourceID != *b.ko.Spec.ResourceID {
			delta.Add("Spec.ResourceID", a.ko.Spec.ResourceID, b.ko.Spec.ResourceID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ScalableDimension, b.ko.Spec.ScalableDimension) {
		delta.Add("Spec.ScalableDimension", a.ko.Spec.ScalableDimension, b.ko.Spec.ScalableDimension)
	} else if a.ko.Spec.ScalableDimension != nil && b.ko.Spec.ScalableDimension != nil {
		if *a.ko.Spec.ScalableDimension != *b.ko.Spec.ScalableDimension {
			delta.Add("Spec.ScalableDimension", a.ko.Spec.ScalableDimension, b.ko.Spec.ScalableDimension)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ScalableTargetAction, b.ko.Spec.ScalableTargetAction) {
		delta.Add("Spec.ScalableTargetAction", a.ko.Spec.ScalableTargetAction, b.ko.Spec.ScalableTargetAction)
	} else if a.ko.Spec.ScalableTargetAction != nil && b.ko.Spec.ScalableTargetAction != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.ScalableTargetAction.MaxCapacity, b.ko.Spec.ScalableTargetAction.MaxCapacity) {
			delta.Add("Spec.ScalableTargetAction.MaxCapacity", a.ko.Spec.ScalableTargetAction.MaxCapacity, b.ko.Spec.ScalableTargetAction.MaxCapacity)
		} else if a.ko.Spec.ScalableTargetAction.MaxCapacity != nil && b.ko.Spec.ScalableTargetAction.MaxCapacity != nil {
			if *a.ko.Spec.ScalableTargetAction.MaxCapacity != *b.ko.Spec.ScalableTargetAction.MaxCapacity {
				delta.Add("Spec.ScalableTargetAction.MaxCapacity", a.ko.Spec.ScalableTargetAction.MaxCapacity, b.ko.Spec.ScalableTargetAction.MaxCapacity)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ScalableTargetAction.MinCapacity, b.ko.Spec.ScalableTargetAction.MinCapacity) {
			delta.Add("Spec.ScalableTargetAction.MinCapacity", a.ko.Spec.ScalableTargetAction.MinCapacity, b.ko.Spec.ScalableTargetAction.MinCapacity)
		} else if a.ko.Spec.ScalableTargetAction.MinCapacity != nil && b.ko.Spec.ScalableTargetAction.MinCapacity != nil {
			if *a.ko.Spec.ScalableTargetAction.MinCapacity != *b.ko.Spec.ScalableTargetAction.MinCapacity {
				delta.Add("Spec.ScalableTargetAction.MinCapacity", a.ko.Spec.ScalableTargetAction.MinCapacity, b.ko.Spec.ScalableTargetAction.MinCapacity)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Schedule, b.ko.Spec.Schedule) {
		delta.Add("Spec.Schedule", a.ko.Spec.Schedule, b.ko.Spec.Schedule)
	} else if a.ko.Spec.Schedule != nil && b.ko.Spec.Schedule != nil {
		if *a.ko.Spec.Schedule != *b.ko.Spec.Schedule {
			delta.Add("Spec.Schedule", a.ko.Spec.Schedule, b.ko.Spec.Schedule)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ScheduledActionName, b.ko.Spec.ScheduledActionName) {
		delta.Add("Spec.ScheduledActionName", a.ko.Spec.ScheduledActionName, b.ko.Spec.ScheduledActionName)
	} else if a.ko.Spec.ScheduledActionName != nil && b.ko.Spec.ScheduledActionName != nil {
		if *a.ko.Spec.ScheduledActionName != *b.ko.Spec.ScheduledActionName {
			delta.Add("Spec.ScheduledActionName", a.ko.Spec.ScheduledActionName, b.ko.Spec.ScheduledActionName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ServiceNamespace, b.ko.Spec.ServiceNamespace) {
		delta.Add("Spec.ServiceNamespace", a.ko.Spec.ServiceNamespace, b.ko.Spec.ServiceNamespace)
	} else if a.ko.Spec.ServiceNamespace != nil && b.ko.Spec.ServiceNamespace != nil {
		if *a.ko.Spec.ServiceNamespace != *b.ko.Spec.ServiceNamespace {
			delta.Add("Spec.ServiceNamespace", a.ko.Spec.ServiceNamespace, b.ko.Spec.ServiceNamespace)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.StartTime, b.ko.Spec.StartTime) {
		delta.Add("Spec.StartTime", a.ko.Spec.StartTime, b.ko.Spec.StartTime)
	} else if a.ko.Spec.StartTime != nil && b.ko.Spec.StartTime != nil {
		if !a.ko.Spec.StartTime.Equal(b.ko.Spec.StartTime) {
			delta.Add("Spec.StartTime", a.ko.Spec.StartTime, b.ko.Spec.StartTime)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Timezone, b.ko.Spec.Timezone) {
		delta.Add("Spec.Timezone", a.ko.Spec.Timezone, b.ko.Spec.Timezone)
	} else if a.ko.Spec.Timezone != nil && b.ko.Spec.Timezone != nil {
		if *a.ko.Spec.Timezone != *b.ko.Spec.Timezone {
			delta.Add("Spec.Timezone", a.ko.Spec.Timezone, b.ko.Spec.Timezone)
		}
	}

	return delta
}
